/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/todos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get todo by ID
         * @description Retrieve a specific todo item by its ID
         */
        get: operations["findById"];
        /**
         * Update todo
         * @description Update an existing todo item (full replacement)
         */
        put: operations["update"];
        post?: never;
        /**
         * Delete todo
         * @description Delete a todo item
         */
        delete: operations["delete"];
        options?: never;
        head?: never;
        /**
         * Partial update todo
         * @description Update specific fields of a todo item (only provided fields will be updated)
         */
        patch: operations["patchTodo"];
        trace?: never;
    };
    "/api/v1/todos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all todos
         * @description Retrieve all todo items with optional filtering and search
         */
        get: operations["list"];
        put?: never;
        /**
         * Create new todo
         * @description Create a new todo item
         */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all categories
         * @description Retrieve all categories
         */
        get: operations["getAllCategories"];
        put?: never;
        /**
         * Create new category
         * @description Create a new category
         */
        post: operations["createCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/todos/today": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get today's todos
         * @description Retrieve todos due today
         */
        get: operations["getTodaysTodos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description Todo item
         * @example {
         *       "id": 1,
         *       "title": "Complete project",
         *       "description": "Finish the todo application",
         *       "completed": false,
         *       "important": true,
         *       "category": "Work",
         *       "dueDate": "2024-12-31",
         *       "createdAt": "2024-01-15T10:30:00",
         *       "updatedAt": "2024-01-15T10:30:00"
         *     }
         */
        Todo: {
            /**
             * Format: int64
             * @description Unique identifier of the todo
             * @example 1
             */
            readonly id?: number;
            /**
             * @description Title of the todo
             * @example Buy groceries
             */
            title: string;
            /**
             * @description Description of the todo
             * @example Buy milk, bread, and eggs
             */
            description?: string;
            /**
             * @description Completion status of the todo
             * @example false
             */
            completed?: boolean;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            readonly createdAt?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            readonly updatedAt?: string;
            /**
             * @description Category of the todo
             * @example Personal
             */
            category?: string;
            /**
             * @description Important status of the todo
             * @example false
             */
            important?: boolean;
            /**
             * Format: date
             * @description Due date of the todo (YYYY-MM-DD format)
             * @example 2024-01-15
             */
            dueDate?: string;
        };
        /** @description Error response structure */
        ErrorResponse: {
            /**
             * Format: int32
             * @description HTTP status code
             * @example 404
             */
            status?: number;
            /**
             * @description Error message
             * @example Resource not found
             */
            message?: string;
            /**
             * @description Error details
             * @example Todo with id 123 not found
             */
            details?: string;
            /**
             * Format: date-time
             * @description Timestamp when the error occurred
             */
            timestamp?: string;
            /**
             * @description Request path
             * @example /api/v1/todos/123
             */
            path?: string;
        };
        /** @description Category for organizing todos */
        Category: {
            /**
             * Format: int64
             * @description Unique identifier of the category
             * @example 1
             */
            id?: number;
            /**
             * @description Name of the category
             * @example Personal
             */
            name: string;
            /**
             * @description Description of the category
             * @example Personal tasks and activities
             */
            description?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            createdAt?: string;
        };
        /**
         * @description Fields to update (only non-null fields will be updated)
         * @example {
         *       "completed": true,
         *       "important": false,
         *       "title": "Updated task"
         *     }
         */
        TodoUpdateRequest: {
            /**
             * @description Updated title of the todo
             * @example Updated task title
             */
            title?: string;
            /**
             * @description Updated description of the todo
             * @example Updated detailed description
             */
            description?: string;
            /**
             * @description Updated completion status
             * @example true
             */
            completed?: boolean;
            /**
             * @description Updated important status
             * @example false
             */
            important?: boolean;
            /**
             * @description Updated category
             * @example Work
             */
            category?: string;
            /**
             * Format: date
             * @description Updated due date (YYYY-MM-DD format)
             * @example 2024-01-15
             */
            dueDate?: string;
        };
        /**
         * @description Response for successful delete operation
         * @example {
         *       "message": "Todo successfully deleted",
         *       "deletedId": 1
         *     }
         */
        DeleteResponse: {
            /**
             * @description Confirmation message
             * @example Todo successfully deleted
             */
            message?: string;
            /**
             * Format: int64
             * @description ID of the deleted resource
             * @example 1
             */
            deletedId?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the todo to retrieve */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Todo found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the todo to update */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Todo"];
            };
        };
        responses: {
            /** @description Todo updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the todo to delete */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Todo deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteResponse"];
                };
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    patchTodo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the todo to update */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TodoUpdateRequest"];
            };
        };
        responses: {
            /** @description Todo updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Todo not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list: {
        parameters: {
            query?: {
                /** @description Filter by completion status */
                completed?: boolean;
                /** @description Filter by category name */
                category?: string;
                /** @description Filter by important status */
                important?: boolean;
                /** @description Filter by due date (YYYY-MM-DD) */
                dueDate?: string;
                /** @description Search term to find in title or description */
                q?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved todos */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Todo"];
            };
        };
        responses: {
            /** @description Todo created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAllCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved categories */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    createCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
            };
        };
        responses: {
            /** @description Category created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Category with this name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTodaysTodos: {
        parameters: {
            query?: {
                /** @description Filter by completion status */
                completed?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Today's todos retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
        };
    };
}

// Convenience type exports for backward compatibility
export type Todo = components["schemas"]["Todo"];
export type Category = components["schemas"]["Category"];
export type ErrorResponse = components["schemas"]["ErrorResponse"];
export type DeleteResponse = components["schemas"]["DeleteResponse"];
export type TodoUpdateRequest = components["schemas"]["TodoUpdateRequest"];
export type TodoFilterParams = operations["list"]["parameters"]["query"];
